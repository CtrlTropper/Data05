"""
Test script cho Vector Service Integration
Test t√≠ch h·ª£p embedding offline v√† FAISS
"""

import asyncio
import os
import sys
import logging
from pathlib import Path

# Add backend to path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.vector_service import vector_service
from services.embedding_service import embedding_service
from db.faiss_store import faiss_store

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def test_embedding_service():
    """Test embedding service offline"""
    print("\n" + "="*60)
    print("üß™ TESTING EMBEDDING SERVICE")
    print("="*60)
    
    try:
        # Test load model
        print("1. Loading embedding model...")
        await embedding_service.load_model()
        
        # Test model info
        model_info = embedding_service.get_model_info()
        print(f"‚úÖ Model loaded: {model_info['model_name']}")
        print(f"   Device: {model_info['device']}")
        print(f"   Dimension: {model_info['dimension']}")
        print(f"   Model path: {model_info['model_path']}")
        
        # Test generate embedding
        print("\n2. Testing embedding generation...")
        test_text = "Tr√≠ tu·ªá nh√¢n t·∫°o l√† m·ªôt lƒ©nh v·ª±c khoa h·ªçc m√°y t√≠nh"
        embedding = embedding_service.generate_embedding(test_text)
        
        print(f"‚úÖ Generated embedding:")
        print(f"   Shape: {embedding.shape}")
        print(f"   Dimension: {embedding.shape[0]}")
        print(f"   Sample values: {embedding[:5]}")
        
        # Test batch embedding
        print("\n3. Testing batch embedding...")
        test_texts = [
            "Machine learning l√† g√¨?",
            "Deep learning ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?",
            "Neural networks c√≥ nh·ªØng lo·∫°i n√†o?"
        ]
        
        embeddings = embedding_service.generate_embeddings_batch(test_texts)
        print(f"‚úÖ Generated batch embeddings:")
        print(f"   Shape: {embeddings.shape}")
        print(f"   Number of texts: {len(test_texts)}")
        
        # Test validation
        print("\n4. Testing embedding validation...")
        is_valid = embedding_service.validate_embedding(embedding)
        print(f"‚úÖ Embedding validation: {is_valid}")
        
        # Test normalization
        normalized = embedding_service.normalize_embedding(embedding)
        norm = sum(normalized**2)**0.5
        print(f"‚úÖ Normalized embedding norm: {norm:.6f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Embedding service test failed: {e}")
        return False

async def test_faiss_store():
    """Test FAISS store"""
    print("\n" + "="*60)
    print("üß™ TESTING FAISS STORE")
    print("="*60)
    
    try:
        # Test initialize
        print("1. Initializing FAISS store...")
        faiss_store.initialize_index()
        print("‚úÖ FAISS index initialized")
        
        # Test add document
        print("\n2. Testing add document...")
        test_text = "FastAPI l√† m·ªôt framework web hi·ªán ƒë·∫°i cho Python"
        chunk_id = faiss_store.add_document(
            text=test_text,
            doc_id="test_doc_1",
            chunk_index=0,
            filename="test.txt",
            embedding_service=embedding_service
        )
        print(f"‚úÖ Added document chunk: {chunk_id}")
        
        # Test add multiple chunks
        print("\n3. Testing add multiple chunks...")
        test_chunks = [
            "ReactJS l√† m·ªôt th∆∞ vi·ªán JavaScript",
            "Vue.js l√† m·ªôt framework JavaScript",
            "Angular l√† m·ªôt platform JavaScript"
        ]
        
        chunk_ids = faiss_store.add_document_chunks(
            chunks=test_chunks,
            doc_id="test_doc_2",
            filename="js_frameworks.txt",
            embedding_service=embedding_service
        )
        print(f"‚úÖ Added {len(chunk_ids)} chunks: {chunk_ids}")
        
        # Test search
        print("\n4. Testing search...")
        query = "JavaScript framework"
        results = faiss_store.search_text(
            query_text=query,
            top_k=3,
            embedding_service=embedding_service
        )
        
        print(f"‚úÖ Search results for '{query}':")
        for i, result in enumerate(results, 1):
            print(f"   {i}. {result['content'][:50]}...")
            print(f"      Similarity: {result['similarity_score']:.4f}")
            print(f"      Document: {result['doc_id']}")
        
        # Test search with doc_id filter
        print("\n5. Testing search with document filter...")
        results_filtered = faiss_store.search_text(
            query_text=query,
            top_k=3,
            doc_id="test_doc_2",
            embedding_service=embedding_service
        )
        
        print(f"‚úÖ Filtered search results (doc_id='test_doc_2'):")
        for i, result in enumerate(results_filtered, 1):
            print(f"   {i}. {result['content'][:50]}...")
            print(f"      Similarity: {result['similarity_score']:.4f}")
        
        # Test get document chunks
        print("\n6. Testing get document chunks...")
        chunks = faiss_store.get_document_chunks("test_doc_2")
        print(f"‚úÖ Retrieved {len(chunks)} chunks for test_doc_2:")
        for chunk in chunks:
            print(f"   - {chunk['content'][:50]}...")
        
        # Test stats
        print("\n7. Testing stats...")
        stats = faiss_store.get_stats()
        print(f"‚úÖ FAISS store stats:")
        print(f"   Total vectors: {stats['total_vectors']}")
        print(f"   Total documents: {stats['total_documents']}")
        print(f"   Total chunks: {stats['total_chunks']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå FAISS store test failed: {e}")
        return False

async def test_vector_service():
    """Test integrated vector service"""
    print("\n" + "="*60)
    print("üß™ TESTING VECTOR SERVICE INTEGRATION")
    print("="*60)
    
    try:
        # Test initialize
        print("1. Initializing vector service...")
        await vector_service.initialize()
        print("‚úÖ Vector service initialized")
        
        # Test add document
        print("\n2. Testing add document...")
        test_text = "Python l√† m·ªôt ng√¥n ng·ªØ l·∫≠p tr√¨nh ph·ªï bi·∫øn"
        chunk_id = vector_service.add_document(
            text=test_text,
            doc_id="python_doc",
            chunk_index=0,
            filename="python.txt"
        )
        print(f"‚úÖ Added document: {chunk_id}")
        
        # Test add document chunks
        print("\n3. Testing add document chunks...")
        ai_chunks = [
            "Tr√≠ tu·ªá nh√¢n t·∫°o (AI) l√† c√¥ng ngh·ªá m√¥ ph·ªèng tr√≠ th√¥ng minh con ng∆∞·ªùi",
            "Machine learning l√† m·ªôt nh√°nh c·ªßa AI",
            "Deep learning s·ª≠ d·ª•ng neural networks v·ªõi nhi·ªÅu l·ªõp",
            "Natural language processing x·ª≠ l√Ω ng√¥n ng·ªØ t·ª± nhi√™n"
        ]
        
        chunk_ids = vector_service.add_document_chunks(
            chunks=ai_chunks,
            doc_id="ai_doc",
            filename="ai_concepts.txt"
        )
        print(f"‚úÖ Added {len(chunk_ids)} chunks for AI document")
        
        # Test search
        print("\n4. Testing search...")
        query = "machine learning v√† neural networks"
        results = vector_service.search(query, top_k=3)
        
        print(f"‚úÖ Search results for '{query}':")
        for i, result in enumerate(results, 1):
            print(f"   {i}. {result['content'][:60]}...")
            print(f"      Similarity: {result['similarity_score']:.4f}")
            print(f"      Document: {result['doc_id']}")
            print(f"      Filename: {result['filename']}")
        
        # Test search with document filter
        print("\n5. Testing search with document filter...")
        results_filtered = vector_service.search(
            query="AI v√† machine learning",
            top_k=2,
            doc_id="ai_doc"
        )
        
        print(f"‚úÖ Filtered search results (ai_doc only):")
        for i, result in enumerate(results_filtered, 1):
            print(f"   {i}. {result['content'][:60]}...")
            print(f"      Similarity: {result['similarity_score']:.4f}")
        
        # Test get document chunks
        print("\n6. Testing get document chunks...")
        chunks = vector_service.get_document_chunks("ai_doc")
        print(f"‚úÖ Retrieved {len(chunks)} chunks for ai_doc:")
        for chunk in chunks:
            print(f"   - Chunk {chunk['chunk_index']}: {chunk['content'][:50]}...")
        
        # Test clear document
        print("\n7. Testing clear document...")
        success = vector_service.clear_doc("python_doc")
        print(f"‚úÖ Clear document result: {success}")
        
        # Test stats
        print("\n8. Testing stats...")
        stats = vector_service.get_stats()
        print(f"‚úÖ Vector service stats:")
        print(f"   Initialized: {stats['vector_service']['initialized']}")
        print(f"   Total vectors: {stats['vector_service']['total_vectors']}")
        print(f"   Total documents: {stats['vector_service']['total_documents']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Vector service test failed: {e}")
        return False

async def test_offline_operation():
    """Test ho·∫°t ƒë·ªông offline"""
    print("\n" + "="*60)
    print("üß™ TESTING OFFLINE OPERATION")
    print("="*60)
    
    try:
        # Test without internet connection
        print("1. Testing offline embedding generation...")
        
        # Disable internet (simulate)
        import socket
        original_socket = socket.socket
        
        def offline_socket(*args, **kwargs):
            raise socket.error("No internet connection")
        
        # socket.socket = offline_socket  # Uncomment to test real offline
        
        # Test embedding generation
        test_text = "Test offline embedding generation"
        embedding = embedding_service.generate_embedding(test_text)
        print(f"‚úÖ Offline embedding generated: {embedding.shape}")
        
        # Test search
        print("\n2. Testing offline search...")
        results = vector_service.search("test query", top_k=2)
        print(f"‚úÖ Offline search completed: {len(results)} results")
        
        # Restore socket
        socket.socket = original_socket
        
        print("\n‚úÖ Offline operation test passed!")
        return True
        
    except Exception as e:
        print(f"‚ùå Offline operation test failed: {e}")
        return False

async def test_performance():
    """Test performance"""
    print("\n" + "="*60)
    print("üß™ TESTING PERFORMANCE")
    print("="*60)
    
    try:
        import time
        
        # Test embedding generation speed
        print("1. Testing embedding generation speed...")
        test_texts = [
            "Performance test text " + str(i) for i in range(10)
        ]
        
        start_time = time.time()
        embeddings = embedding_service.generate_embeddings_batch(test_texts)
        end_time = time.time()
        
        print(f"‚úÖ Generated {len(test_texts)} embeddings in {end_time - start_time:.2f}s")
        print(f"   Speed: {len(test_texts)/(end_time - start_time):.2f} embeddings/second")
        
        # Test search speed
        print("\n2. Testing search speed...")
        start_time = time.time()
        results = vector_service.search("performance test", top_k=5)
        end_time = time.time()
        
        print(f"‚úÖ Search completed in {end_time - start_time:.4f}s")
        print(f"   Results: {len(results)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Performance test failed: {e}")
        return False

async def main():
    """Main test function"""
    print("üöÄ VECTOR SERVICE INTEGRATION TEST")
    print("Testing embedding offline + FAISS integration")
    
    # Create test directories
    os.makedirs("models/embedding", exist_ok=True)
    os.makedirs("data/faiss_index", exist_ok=True)
    os.makedirs("data/metadata", exist_ok=True)
    
    test_results = []
    
    # Run tests
    test_results.append(await test_embedding_service())
    test_results.append(await test_faiss_store())
    test_results.append(await test_vector_service())
    test_results.append(await test_offline_operation())
    test_results.append(await test_performance())
    
    # Summary
    print("\n" + "="*60)
    print("üìä TEST SUMMARY")
    print("="*60)
    
    passed = sum(test_results)
    total = len(test_results)
    
    print(f"Tests passed: {passed}/{total}")
    
    if passed == total:
        print("üéâ All tests passed! Vector service integration is working correctly.")
    else:
        print("‚ö†Ô∏è Some tests failed. Please check the errors above.")
    
    # Cleanup
    try:
        await vector_service.cleanup()
        print("\n‚úÖ Cleanup completed")
    except Exception as e:
        print(f"\n‚ö†Ô∏è Cleanup error: {e}")

if __name__ == "__main__":
    asyncio.run(main())
