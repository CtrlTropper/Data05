"""
Test script cho Vietnamese Translation
Ki·ªÉm tra ch·ª©c nƒÉng d·ªãch v√† ƒë·∫£m b·∫£o output lu√¥n l√† ti·∫øng Vi·ªát
"""

import asyncio
import httpx
import time
import os
import sys
from pathlib import Path

# Add backend to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

async def test_vietnamese_translation():
    """Test Vietnamese translation functionality"""
    print("\n" + "="*60)
    print("üß™ TESTING VIETNAMESE TRANSLATION")
    print("="*60)
    
    # Test cases
    test_cases = [
        # Vietnamese questions (should remain in Vietnamese)
        {
            "question": "B·∫£o m·∫≠t th√¥ng tin l√† g√¨?",
            "expected_language": "Vietnamese",
            "category": "Vietnamese Security Question"
        },
        {
            "question": "L√†m th·∫ø n√†o ƒë·ªÉ b·∫£o v·ªá kh·ªèi ransomware?",
            "expected_language": "Vietnamese",
            "category": "Vietnamese Security Question"
        },
        {
            "question": "SOC ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?",
            "expected_language": "Vietnamese",
            "category": "Vietnamese Security Question"
        },
        
        # English questions (should be translated to Vietnamese)
        {
            "question": "What is information security?",
            "expected_language": "Vietnamese",
            "category": "English Security Question"
        },
        {
            "question": "How to protect against ransomware?",
            "expected_language": "Vietnamese",
            "category": "English Security Question"
        },
        {
            "question": "How does SOC work?",
            "expected_language": "Vietnamese",
            "category": "English Security Question"
        },
        {
            "question": "What is penetration testing?",
            "expected_language": "Vietnamese",
            "category": "English Security Question"
        },
        {
            "question": "Explain network security best practices",
            "expected_language": "Vietnamese",
            "category": "English Security Question"
        },
        {
            "question": "What are the OWASP Top 10 vulnerabilities?",
            "expected_language": "Vietnamese",
            "category": "English Security Question"
        },
        {
            "question": "How to implement ISO 27001?",
            "expected_language": "Vietnamese",
            "category": "English Security Question"
        }
    ]
    
    # Test chat endpoint
    print("Testing /api/chat endpoint with Vietnamese translation...\n")
    
    passed = 0
    total = len(test_cases)
    
    async with httpx.AsyncClient(timeout=60.0) as client:
        for i, test_case in enumerate(test_cases, 1):
            question = test_case["question"]
            expected_language = test_case["expected_language"]
            category = test_case["category"]
            
            try:
                # Send chat request
                response = await client.post(
                    "http://localhost:8000/api/chat",
                    json={
                        "question": question,
                        "top_k": 3
                    }
                )
                
                if response.status_code == 200:
                    data = response.json()
                    response_text = data.get("response", "")
                    
                    # Check if response is in Vietnamese
                    is_vietnamese = _is_vietnamese_text(response_text)
                    
                    # Check if response is rejection message
                    is_rejection = "Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£ c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn An ninh An to√†n th√¥ng tin" in response_text
                    
                    # Determine if test passed
                    if expected_language == "Vietnamese" and is_vietnamese and not is_rejection:
                        status = "‚úÖ PASS"
                        passed += 1
                    else:
                        status = "‚ùå FAIL"
                    
                    print(f"Test {i:2d}: {status}")
                    print(f"  Question: {question}")
                    print(f"  Category: {category}")
                    print(f"  Expected: {expected_language}")
                    print(f"  Is Vietnamese: {is_vietnamese}")
                    print(f"  Is Rejection: {is_rejection}")
                    print(f"  Response: {response_text[:100]}...")
                    print()
                    
                else:
                    print(f"Test {i:2d}: ‚ùå FAIL - HTTP {response.status_code}")
                    print(f"  Question: {question}")
                    print(f"  Error: {response.text}")
                    print()
                    
            except Exception as e:
                print(f"Test {i:2d}: ‚ùå ERROR - {e}")
                print(f"  Question: {question}")
                print()
    
    return passed, total

async def test_streaming_vietnamese_translation():
    """Test streaming Vietnamese translation"""
    print("\n" + "="*60)
    print("üß™ TESTING STREAMING VIETNAMESE TRANSLATION")
    print("="*60)
    
    # Test cases
    test_cases = [
        {
            "question": "What is cybersecurity?",
            "expected_language": "Vietnamese",
            "category": "English Security Question"
        },
        {
            "question": "B·∫£o m·∫≠t m·∫°ng l√† g√¨?",
            "expected_language": "Vietnamese",
            "category": "Vietnamese Security Question"
        }
    ]
    
    print("Testing /api/chat/stream endpoint with Vietnamese translation...\n")
    
    async with httpx.AsyncClient(timeout=None) as client:
        for i, test_case in enumerate(test_cases, 1):
            question = test_case["question"]
            expected_language = test_case["expected_language"]
            category = test_case["category"]
            
            try:
                # Send streaming chat request
                response = await client.post(
                    "http://localhost:8000/api/chat/stream",
                    json={
                        "question": question,
                        "top_k": 3
                    },
                    headers={"Accept": "text/event-stream"}
                )
                
                if response.status_code == 200:
                    print(f"Test {i}: Streaming chat started")
                    print(f"  Question: {question}")
                    print(f"  Category: {category}")
                    print(f"  Expected: {expected_language}")
                    
                    # Read streaming response
                    full_response = ""
                    rejection_detected = False
                    
                    async for chunk in response.aiter_bytes():
                        try:
                            decoded_chunk = chunk.decode('utf-8')
                            for line in decoded_chunk.split('\n'):
                                if line.startswith("data: "):
                                    import json
                                    data = json.loads(line[len("data: "):])
                                    
                                    if data["type"] == "token":
                                        full_response += data["content"]
                                        
                                        # Check for rejection message
                                        if "Xin l·ªói, t√¥i ch·ªâ h·ªó tr·ª£" in full_response:
                                            rejection_detected = True
                                            break
                                    
                                    elif data["type"] == "end":
                                        break
                                    
                                    elif data["type"] == "error":
                                        print(f"  Error: {data['message']}")
                                        break
                        except json.JSONDecodeError:
                            continue
                        except Exception as e:
                            print(f"  Stream error: {e}")
                            break
                    
                    # Check if response is in Vietnamese
                    is_vietnamese = _is_vietnamese_text(full_response)
                    
                    # Check result
                    if expected_language == "Vietnamese" and is_vietnamese and not rejection_detected:
                        status = "‚úÖ PASS"
                    else:
                        status = "‚ùå FAIL"
                    
                    print(f"  Status: {status}")
                    print(f"  Is Vietnamese: {is_vietnamese}")
                    print(f"  Rejection detected: {rejection_detected}")
                    print(f"  Response length: {len(full_response)} chars")
                    print(f"  Response: {full_response[:100]}...")
                    print()
                    
                else:
                    print(f"Test {i}: ‚ùå FAIL - HTTP {response.status_code}")
                    print(f"  Question: {question}")
                    print()
                    
            except Exception as e:
                print(f"Test {i}: ‚ùå ERROR - {e}")
                print(f"  Question: {question}")
                print()

def _is_vietnamese_text(text: str) -> bool:
    """
    Ki·ªÉm tra xem text c√≥ ph·∫£i l√† ti·∫øng Vi·ªát kh√¥ng
    
    Args:
        text: Text c·∫ßn ki·ªÉm tra
        
    Returns:
        bool: True n·∫øu l√† ti·∫øng Vi·ªát, False n·∫øu kh√¥ng
    """
    if not text or not text.strip():
        return False
    
    # Vietnamese characters
    vietnamese_chars = set('√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë')
    
    # Count Vietnamese characters
    vietnamese_count = sum(1 for char in text.lower() if char in vietnamese_chars)
    
    # Count total alphabetic characters
    total_alpha = sum(1 for char in text if char.isalpha())
    
    # If more than 10% Vietnamese characters, consider it Vietnamese
    if total_alpha > 0 and vietnamese_count / total_alpha > 0.1:
        return True
    
    # Check for common Vietnamese words
    vietnamese_words = {
        'l√†', 'c·ªßa', 'v√†', 'trong', 'v·ªõi', 'ƒë∆∞·ª£c', 'c√≥', 'kh√¥ng', 'ƒë·ªÉ', 't·ª´',
        'n√†y', 'ƒë√≥', 'nh∆∞', 'khi', 'n·∫øu', 'th√¨', 's·∫Ω', 'ƒë√£', 'ƒëang', 's·∫Ω',
        'm·ªôt', 'hai', 'ba', 'b·ªën', 'nƒÉm', 's√°u', 'b·∫£y', 't√°m', 'ch√≠n', 'm∆∞·ªùi',
        't√¥i', 'b·∫°n', 'anh', 'ch·ªã', 'em', 'ch√∫ng', 'h·ªç', 'ch√∫ng t√¥i', 'ch√∫ng ta',
        'g√¨', 'n√†o', 'ƒë√¢u', 'sao', 't·∫°i sao', 'nh∆∞ th·∫ø n√†o', 'bao nhi√™u',
        'b·∫£o m·∫≠t', 'an to√†n', 'th√¥ng tin', 'm·∫°ng', 'h·ªá th·ªëng', 'd·ªØ li·ªáu',
        't·∫•n c√¥ng', 'b·∫£o v·ªá', 'ph√≤ng ch·ªëng', 'ki·ªÉm tra', 'ƒë√°nh gi√°'
    }
    
    words = text.lower().split()
    vietnamese_word_count = sum(1 for word in words if word in vietnamese_words)
    
    # If more than 20% Vietnamese words, consider it Vietnamese
    if len(words) > 0 and vietnamese_word_count / len(words) > 0.2:
        return True
    
    return False

async def test_language_detection():
    """Test language detection functionality"""
    print("\n" + "="*60)
    print("üß™ TESTING LANGUAGE DETECTION")
    print("="*60)
    
    # Test cases
    test_cases = [
        ("B·∫£o m·∫≠t th√¥ng tin l√† g√¨?", "Vietnamese"),
        ("What is information security?", "English"),
        ("L√†m th·∫ø n√†o ƒë·ªÉ b·∫£o v·ªá kh·ªèi ransomware?", "Vietnamese"),
        ("How to protect against ransomware?", "English"),
        ("SOC ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?", "Vietnamese"),
        ("How does SOC work?", "English"),
        ("T·∫•n c√¥ng m·∫°ng c√≥ nh·ªØng lo·∫°i n√†o?", "Vietnamese"),
        ("What are the types of cyber attacks?", "English"),
        ("M√£ h√≥a d·ªØ li·ªáu quan tr·ªçng nh∆∞ th·∫ø n√†o?", "Vietnamese"),
        ("How important is data encryption?", "English")
    ]
    
    print("Testing language detection...\n")
    
    for question, expected_language in test_cases:
        detected_language = "Vietnamese" if not _is_english_text(question) else "English"
        
        if detected_language == expected_language:
            status = "‚úÖ CORRECT"
        else:
            status = "‚ùå INCORRECT"
        
        print(f"{status} - Expected: {expected_language}, Detected: {detected_language}")
        print(f"  Question: {question}")
        print()

def _is_english_text(text: str) -> bool:
    """
    Ki·ªÉm tra xem text c√≥ ph·∫£i l√† ti·∫øng Anh kh√¥ng
    
    Args:
        text: Text c·∫ßn ki·ªÉm tra
        
    Returns:
        bool: True n·∫øu l√† ti·∫øng Anh, False n·∫øu kh√¥ng
    """
    if not text or not text.strip():
        return False
    
    # Vietnamese characters
    vietnamese_chars = set('√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë')
    
    # Count Vietnamese characters
    vietnamese_count = sum(1 for char in text.lower() if char in vietnamese_chars)
    
    # Count total alphabetic characters
    total_alpha = sum(1 for char in text if char.isalpha())
    
    # If more than 10% Vietnamese characters, consider it Vietnamese
    if total_alpha > 0 and vietnamese_count / total_alpha > 0.1:
        return False
    
    # Check for common English words
    english_words = {
        'the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by',
        'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had',
        'do', 'does', 'did', 'will', 'would', 'could', 'should', 'may', 'might',
        'can', 'cannot', 'this', 'that', 'these', 'those', 'a', 'an', 'as', 'if',
        'when', 'where', 'why', 'how', 'what', 'which', 'who', 'whom', 'whose'
    }
    
    words = text.lower().split()
    english_word_count = sum(1 for word in words if word in english_words)
    
    # If more than 20% English words, consider it English
    if len(words) > 0 and english_word_count / len(words) > 0.2:
        return True
    
    return False

async def main():
    """Main test function"""
    print("üöÄ VIETNAMESE TRANSLATION TEST")
    print("Testing Vietnamese translation functionality")
    
    # Check if backend is running
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("http://localhost:8000/api/health")
            if response.status_code != 200:
                print("‚ùå Backend is not running. Please start the backend first.")
                return
    except Exception as e:
        print("‚ùå Cannot connect to backend. Please start the backend first.")
        print(f"Error: {e}")
        return
    
    print("‚úÖ Backend is running. Starting tests...\n")
    
    # Run tests
    passed, total = await test_vietnamese_translation()
    await test_streaming_vietnamese_translation()
    await test_language_detection()
    
    # Summary
    print("\n" + "="*60)
    print("üìä TEST SUMMARY")
    print("="*60)
    print(f"Vietnamese translation tests passed: {passed}/{total}")
    print(f"Success rate: {passed/total*100:.1f}%")
    
    if passed == total:
        print("üéâ All Vietnamese translation tests passed!")
        print("‚úÖ Chatbot correctly translates English questions to Vietnamese.")
        print("‚úÖ Chatbot maintains Vietnamese responses for Vietnamese questions.")
        print("‚úÖ All responses are in Vietnamese.")
    else:
        print("‚ö†Ô∏è Some Vietnamese translation tests failed.")
        print("‚ùå Please check the translation implementation.")

if __name__ == "__main__":
    asyncio.run(main())
