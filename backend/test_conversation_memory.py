"""
Test script cho Conversation Memory
Ki·ªÉm tra ch·ª©c nƒÉng tr√≠ nh·ªõ h·ªôi tho·∫°i c·ªßa chatbot
"""

import asyncio
import httpx
import time
import os
import sys
from pathlib import Path

# Add backend to path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

async def test_conversation_memory():
    """Test tr√≠ nh·ªõ h·ªôi tho·∫°i c·ªßa chatbot"""
    print("\n" + "="*60)
    print("üß™ TESTING CONVERSATION MEMORY")
    print("="*60)
    
    async with httpx.AsyncClient(timeout=60.0) as client:
        # Step 1: T·∫°o session m·ªõi
        print("Step 1: T·∫°o session m·ªõi")
        response = await client.post(
            "http://localhost:8000/api/chat_sessions",
            json={"title": "Memory Test Session"}
        )
        
        if response.status_code != 200:
            print(f"‚ùå Failed to create session: {response.status_code}")
            return False
        
        session_id = response.json()["session_id"]
        print(f"‚úÖ Created session: {session_id[:8]}...")
        
        # Step 2: C√¢u h·ªèi ƒë·∫ßu ti√™n
        print("\nStep 2: C√¢u h·ªèi ƒë·∫ßu ti√™n v·ªÅ phishing")
        response = await client.post(
            "http://localhost:8000/api/chat",
            json={
                "question": "T·∫•n c√¥ng phishing l√† g√¨?",
                "session_id": session_id,
                "top_k": 3,
                "memory_limit": 5
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Question 1 answered")
            print(f"   Question: {data['question']}")
            print(f"   Response: {data['response'][:100]}...")
            print(f"   Sources: {len(data['sources'])}")
            print(f"   Processing time: {data['processing_time']:.2f}s")
        else:
            print(f"‚ùå Failed to answer question 1: {response.status_code}")
            print(f"   Error: {response.text}")
            return False
        
        # Step 3: C√¢u h·ªèi th·ª© hai (c√≥ tham chi·∫øu ƒë·∫øn c√¢u h·ªèi tr∆∞·ªõc)
        print("\nStep 3: C√¢u h·ªèi th·ª© hai (tham chi·∫øu ƒë·∫øn phishing)")
        response = await client.post(
            "http://localhost:8000/api/chat",
            json={
                "question": "C√≥ c√°ch n√†o ph√≤ng ch·ªëng n√≥ kh√¥ng?",
                "session_id": session_id,
                "top_k": 3,
                "memory_limit": 5
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Question 2 answered")
            print(f"   Question: {data['question']}")
            print(f"   Response: {data['response'][:100]}...")
            print(f"   Sources: {len(data['sources'])}")
            print(f"   Processing time: {data['processing_time']:.2f}s")
            
            # Ki·ªÉm tra xem response c√≥ hi·ªÉu "n√≥" = "phishing" kh√¥ng
            response_text = data['response'].lower()
            if 'phishing' in response_text or 't·∫•n c√¥ng' in response_text:
                print("‚úÖ Chatbot hi·ªÉu ƒë∆∞·ª£c 'n√≥' = 'phishing' (c√≥ tr√≠ nh·ªõ)")
            else:
                print("‚ö†Ô∏è Chatbot c√≥ th·ªÉ ch∆∞a hi·ªÉu ƒë∆∞·ª£c 'n√≥' = 'phishing'")
        else:
            print(f"‚ùå Failed to answer question 2: {response.status_code}")
            print(f"   Error: {response.text}")
            return False
        
        # Step 4: C√¢u h·ªèi th·ª© ba (tham chi·∫øu ƒë·∫øn c√¢u tr·∫£ l·ªùi tr∆∞·ªõc)
        print("\nStep 4: C√¢u h·ªèi th·ª© ba (tham chi·∫øu ƒë·∫øn c√¢u tr·∫£ l·ªùi tr∆∞·ªõc)")
        response = await client.post(
            "http://localhost:8000/api/chat",
            json={
                "question": "B·∫°n c√≥ th·ªÉ gi·∫£i th√≠ch chi ti·∫øt h∆°n v·ªÅ c√°ch th·ª© 2 kh√¥ng?",
                "session_id": session_id,
                "top_k": 3,
                "memory_limit": 5
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Question 3 answered")
            print(f"   Question: {data['question']}")
            print(f"   Response: {data['response'][:100]}...")
            print(f"   Sources: {len(data['sources'])}")
            print(f"   Processing time: {data['processing_time']:.2f}s")
        else:
            print(f"‚ùå Failed to answer question 3: {response.status_code}")
            print(f"   Error: {response.text}")
            return False
        
        # Step 5: Ki·ªÉm tra l·ªãch s·ª≠ h·ªôi tho·∫°i
        print("\nStep 5: Ki·ªÉm tra l·ªãch s·ª≠ h·ªôi tho·∫°i")
        response = await client.get(f"http://localhost:8000/api/chat_sessions/{session_id}/messages")
        
        if response.status_code == 200:
            messages = response.json()
            print(f"‚úÖ Retrieved {len(messages)} messages from session")
            for i, msg in enumerate(messages, 1):
                role = msg['role']
                content = msg['content'][:50] + "..." if len(msg['content']) > 50 else msg['content']
                print(f"   {i}. [{role}] {content}")
        else:
            print(f"‚ùå Failed to get messages: {response.status_code}")
            print(f"   Error: {response.text}")
        
        # Step 6: Cleanup - x√≥a session
        print("\nStep 6: Cleanup - x√≥a session")
        response = await client.delete(f"http://localhost:8000/api/chat_sessions/{session_id}")
        
        if response.status_code == 200:
            print(f"‚úÖ Deleted session: {session_id[:8]}...")
        else:
            print(f"‚ùå Failed to delete session: {response.status_code}")
            print(f"   Error: {response.text}")
        
        return True

async def test_memory_without_session():
    """Test chat kh√¥ng c√≥ session (kh√¥ng c√≥ tr√≠ nh·ªõ)"""
    print("\n" + "="*60)
    print("üß™ TESTING CHAT WITHOUT SESSION (NO MEMORY)")
    print("="*60)
    
    async with httpx.AsyncClient(timeout=60.0) as client:
        # C√¢u h·ªèi ƒë·∫ßu ti√™n
        print("Question 1: T·∫•n c√¥ng phishing l√† g√¨?")
        response = await client.post(
            "http://localhost:8000/api/chat",
            json={
                "question": "T·∫•n c√¥ng phishing l√† g√¨?",
                "top_k": 3,
                "memory_limit": 5
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Question 1 answered")
            print(f"   Response: {data['response'][:100]}...")
        else:
            print(f"‚ùå Failed to answer question 1: {response.status_code}")
            return False
        
        # C√¢u h·ªèi th·ª© hai (kh√¥ng c√≥ session, kh√¥ng c√≥ tr√≠ nh·ªõ)
        print("\nQuestion 2: C√≥ c√°ch n√†o ph√≤ng ch·ªëng n√≥ kh√¥ng?")
        response = await client.post(
            "http://localhost:8000/api/chat",
            json={
                "question": "C√≥ c√°ch n√†o ph√≤ng ch·ªëng n√≥ kh√¥ng?",
                "top_k": 3,
                "memory_limit": 5
            }
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Question 2 answered")
            print(f"   Response: {data['response'][:100]}...")
            
            # Ki·ªÉm tra xem response c√≥ hi·ªÉu "n√≥" kh√¥ng (kh√¥ng c√≥ tr√≠ nh·ªõ)
            response_text = data['response'].lower()
            if 'phishing' in response_text or 't·∫•n c√¥ng' in response_text:
                print("‚ö†Ô∏è Chatbot v·∫´n hi·ªÉu ƒë∆∞·ª£c 'n√≥' (c√≥ th·ªÉ do context t·ª´ vector search)")
            else:
                print("‚úÖ Chatbot kh√¥ng hi·ªÉu ƒë∆∞·ª£c 'n√≥' (kh√¥ng c√≥ tr√≠ nh·ªõ)")
        else:
            print(f"‚ùå Failed to answer question 2: {response.status_code}")
            return False
        
        return True

async def test_memory_limit():
    """Test gi·ªõi h·∫°n tr√≠ nh·ªõ"""
    print("\n" + "="*60)
    print("üß™ TESTING MEMORY LIMIT")
    print("="*60)
    
    async with httpx.AsyncClient(timeout=60.0) as client:
        # T·∫°o session m·ªõi
        response = await client.post(
            "http://localhost:8000/api/chat_sessions",
            json={"title": "Memory Limit Test"}
        )
        
        if response.status_code != 200:
            print(f"‚ùå Failed to create session: {response.status_code}")
            return False
        
        session_id = response.json()["session_id"]
        print(f"‚úÖ Created session: {session_id[:8]}...")
        
        # G·ª≠i nhi·ªÅu c√¢u h·ªèi ƒë·ªÉ test memory limit
        questions = [
            "B·∫£o m·∫≠t th√¥ng tin l√† g√¨?",
            "T·∫•n c√¥ng m·∫°ng c√≥ nh·ªØng lo·∫°i n√†o?",
            "SOC ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?",
            "Pentest c√≥ nh·ªØng giai ƒëo·∫°n n√†o?",
            "M√£ h√≥a d·ªØ li·ªáu quan tr·ªçng nh∆∞ th·∫ø n√†o?",
            "Firewall ho·∫°t ƒë·ªông ra sao?",
            "C√≥ c√°ch n√†o b·∫£o v·ªá kh·ªèi ransomware kh√¥ng?"
        ]
        
        for i, question in enumerate(questions, 1):
            print(f"\nQuestion {i}: {question}")
            response = await client.post(
                "http://localhost:8000/api/chat",
                json={
                    "question": question,
                    "session_id": session_id,
                    "top_k": 3,
                    "memory_limit": 3  # Ch·ªâ l·∫•y 3 tin nh·∫Øn g·∫ßn nh·∫•t
                }
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Question {i} answered")
                print(f"   Response: {data['response'][:50]}...")
            else:
                print(f"‚ùå Failed to answer question {i}: {response.status_code}")
        
        # Ki·ªÉm tra l·ªãch s·ª≠ h·ªôi tho·∫°i
        print(f"\nChecking conversation history...")
        response = await client.get(f"http://localhost:8000/api/chat_sessions/{session_id}/messages")
        
        if response.status_code == 200:
            messages = response.json()
            print(f"‚úÖ Total messages in session: {len(messages)}")
            print("   Last 3 messages (memory limit):")
            for msg in messages[-3:]:
                role = msg['role']
                content = msg['content'][:30] + "..." if len(msg['content']) > 30 else msg['content']
                print(f"   - [{role}] {content}")
        else:
            print(f"‚ùå Failed to get messages: {response.status_code}")
        
        # Cleanup
        await client.delete(f"http://localhost:8000/api/chat_sessions/{session_id}")
        print(f"‚úÖ Cleaned up session")
        
        return True

async def test_streaming_with_memory():
    """Test streaming chat v·ªõi tr√≠ nh·ªõ"""
    print("\n" + "="*60)
    print("üß™ TESTING STREAMING CHAT WITH MEMORY")
    print("="*60)
    
    async with httpx.AsyncClient(timeout=None) as client:
        # T·∫°o session m·ªõi
        response = await client.post(
            "http://localhost:8000/api/chat_sessions",
            json={"title": "Streaming Memory Test"}
        )
        
        if response.status_code != 200:
            print(f"‚ùå Failed to create session: {response.status_code}")
            return False
        
        session_id = response.json()["session_id"]
        print(f"‚úÖ Created session: {session_id[:8]}...")
        
        # C√¢u h·ªèi ƒë·∫ßu ti√™n
        print("\nQuestion 1: T·∫•n c√¥ng phishing l√† g√¨?")
        response = await client.post(
            "http://localhost:8000/api/chat/stream",
            json={
                "question": "T·∫•n c√¥ng phishing l√† g√¨?",
                "session_id": session_id,
                "top_k": 3,
                "memory_limit": 5
            },
            headers={"Accept": "text/event-stream"}
        )
        
        if response.status_code == 200:
            print("‚úÖ Streaming question 1 started")
            full_response_1 = ""
            async for chunk in response.aiter_bytes():
                try:
                    decoded_chunk = chunk.decode('utf-8')
                    for line in decoded_chunk.split('\n'):
                        if line.startswith("data: "):
                            import json
                            data = json.loads(line[len("data: "):])
                            
                            if data["type"] == "token":
                                full_response_1 += data["content"]
                            elif data["type"] == "end":
                                break
                except json.JSONDecodeError:
                    continue
                except Exception as e:
                    print(f"‚ùå Stream error: {e}")
                    return False
            
            print(f"   Response length: {len(full_response_1)} chars")
        else:
            print(f"‚ùå Failed to stream question 1: {response.status_code}")
            return False
        
        # C√¢u h·ªèi th·ª© hai (tham chi·∫øu ƒë·∫øn c√¢u h·ªèi tr∆∞·ªõc)
        print("\nQuestion 2: C√≥ c√°ch n√†o ph√≤ng ch·ªëng n√≥ kh√¥ng?")
        response = await client.post(
            "http://localhost:8000/api/chat/stream",
            json={
                "question": "C√≥ c√°ch n√†o ph√≤ng ch·ªëng n√≥ kh√¥ng?",
                "session_id": session_id,
                "top_k": 3,
                "memory_limit": 5
            },
            headers={"Accept": "text/event-stream"}
        )
        
        if response.status_code == 200:
            print("‚úÖ Streaming question 2 started")
            full_response_2 = ""
            async for chunk in response.aiter_bytes():
                try:
                    decoded_chunk = chunk.decode('utf-8')
                    for line in decoded_chunk.split('\n'):
                        if line.startswith("data: "):
                            import json
                            data = json.loads(line[len("data: "):])
                            
                            if data["type"] == "token":
                                full_response_2 += data["content"]
                            elif data["type"] == "end":
                                break
                except json.JSONDecodeError:
                    continue
                except Exception as e:
                    print(f"‚ùå Stream error: {e}")
                    return False
            
            print(f"   Response length: {len(full_response_2)} chars")
            
            # Ki·ªÉm tra xem response c√≥ hi·ªÉu "n√≥" = "phishing" kh√¥ng
            response_text = full_response_2.lower()
            if 'phishing' in response_text or 't·∫•n c√¥ng' in response_text:
                print("‚úÖ Chatbot hi·ªÉu ƒë∆∞·ª£c 'n√≥' = 'phishing' (c√≥ tr√≠ nh·ªõ)")
            else:
                print("‚ö†Ô∏è Chatbot c√≥ th·ªÉ ch∆∞a hi·ªÉu ƒë∆∞·ª£c 'n√≥' = 'phishing'")
        else:
            print(f"‚ùå Failed to stream question 2: {response.status_code}")
            return False
        
        # Cleanup
        await client.delete(f"http://localhost:8000/api/chat_sessions/{session_id}")
        print(f"‚úÖ Cleaned up session")
        
        return True

async def main():
    """Main test function"""
    print("üöÄ CONVERSATION MEMORY TEST")
    print("Testing conversation memory functionality")
    
    # Check if backend is running
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get("http://localhost:8000/api/health")
            if response.status_code != 200:
                print("‚ùå Backend is not running. Please start the backend first.")
                return
    except Exception as e:
        print("‚ùå Cannot connect to backend. Please start the backend first.")
        print(f"Error: {e}")
        return
    
    print("‚úÖ Backend is running. Starting tests...\n")
    
    # Run tests
    test_results = []
    
    test_results.append(await test_conversation_memory())
    test_results.append(await test_memory_without_session())
    test_results.append(await test_memory_limit())
    test_results.append(await test_streaming_with_memory())
    
    # Summary
    print("\n" + "="*60)
    print("üìä TEST SUMMARY")
    print("="*60)
    
    passed = sum(test_results)
    total = len(test_results)
    
    print(f"Tests passed: {passed}/{total}")
    print(f"Success rate: {passed/total*100:.1f}%")
    
    if passed == total:
        print("üéâ All conversation memory tests passed!")
        print("‚úÖ Chatbot has working conversation memory.")
        print("‚úÖ Chatbot can remember context across questions.")
        print("‚úÖ Memory limit works correctly.")
        print("‚úÖ Streaming chat with memory works correctly.")
    else:
        print("‚ö†Ô∏è Some conversation memory tests failed.")
        print("‚ùå Please check the memory implementation.")

if __name__ == "__main__":
    asyncio.run(main())
