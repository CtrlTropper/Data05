"""
PDF Processing Service
X·ª≠ l√Ω PDF v·ªõi OCR cho scan documents
"""

import os
import logging
import tempfile
from typing import List, Dict, Any, Optional, Tuple
from pathlib import Path
import fitz  # PyMuPDF
import pytesseract
from pdf2image import convert_from_path
from PIL import Image
import io

logger = logging.getLogger(__name__)

class PDFProcessor:
    """Service x·ª≠ l√Ω PDF v·ªõi OCR"""
    
    def __init__(self):
        self.supported_languages = ['vie', 'eng']  # Vietnamese v√† English
        self.ocr_config = '--oem 3 --psm 6'  # OCR Engine Mode v√† Page Segmentation Mode
        self.is_initialized = False
        
    async def initialize(self):
        """Kh·ªüi t·∫°o PDF processor"""
        try:
            # Ki·ªÉm tra tesseract c√≥ s·∫µn kh√¥ng
            tesseract_version = pytesseract.get_tesseract_version()
            logger.info(f"‚úÖ Tesseract OCR version: {tesseract_version}")
            
            # Ki·ªÉm tra c√°c ng√¥n ng·ªØ c√≥ s·∫µn
            available_languages = pytesseract.get_languages()
            logger.info(f"üìö Available OCR languages: {available_languages}")
            
            # Ki·ªÉm tra ng√¥n ng·ªØ c·∫ßn thi·∫øt
            for lang in self.supported_languages:
                if lang in available_languages:
                    logger.info(f"‚úÖ OCR language '{lang}' is available")
                else:
                    logger.warning(f"‚ö†Ô∏è OCR language '{lang}' is not available")
            
            self.is_initialized = True
            logger.info("‚úÖ PDF Processor initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Error initializing PDF Processor: {e}")
            self.is_initialized = False
            raise
    
    def detect_pdf_type(self, pdf_path: str) -> str:
        """
        Ph√°t hi·ªán lo·∫°i PDF (text-based ho·∫∑c image-based)
        
        Args:
            pdf_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF
            
        Returns:
            str: 'text-based' ho·∫∑c 'image-based'
        """
        try:
            doc = fitz.open(pdf_path)
            text_content = ""
            
            # L·∫•y text t·ª´ 3 trang ƒë·∫ßu ƒë·ªÉ ki·ªÉm tra
            for page_num in range(min(3, len(doc))):
                page = doc[page_num]
                text_content += page.get_text()
            
            doc.close()
            
            # N·∫øu c√≥ √≠t text (d∆∞·ªõi 50 k√Ω t·ª±) th√¨ c√≥ th·ªÉ l√† image-based
            if len(text_content.strip()) < 50:
                return 'image-based'
            else:
                return 'text-based'
                
        except Exception as e:
            logger.error(f"‚ùå Error detecting PDF type: {e}")
            return 'image-based'  # Default to image-based n·∫øu c√≥ l·ªói
    
    def extract_text_from_pdf(self, pdf_path: str) -> Tuple[str, Dict[str, Any]]:
        """
        Tr√≠ch xu·∫•t text t·ª´ PDF (text-based)
        
        Args:
            pdf_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF
            
        Returns:
            Tuple[str, Dict]: (extracted_text, metadata)
        """
        try:
            doc = fitz.open(pdf_path)
            text_content = ""
            page_texts = []
            
            for page_num in range(len(doc)):
                page = doc[page_num]
                page_text = page.get_text()
                text_content += page_text + "\n"
                page_texts.append({
                    'page_number': page_num + 1,
                    'text': page_text,
                    'char_count': len(page_text)
                })
            
            doc.close()
            
            metadata = {
                'processing_type': 'text-based',
                'total_pages': len(page_texts),
                'total_characters': len(text_content),
                'page_details': page_texts,
                'ocr_language': None
            }
            
            logger.info(f"‚úÖ Extracted text from {len(page_texts)} pages (text-based)")
            return text_content.strip(), metadata
            
        except Exception as e:
            logger.error(f"‚ùå Error extracting text from PDF: {e}")
            raise
    
    def extract_text_with_ocr(self, pdf_path: str, languages: List[str] = None) -> Tuple[str, Dict[str, Any]]:
        """
        Tr√≠ch xu·∫•t text t·ª´ PDF b·∫±ng OCR (image-based)
        
        Args:
            pdf_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF
            languages: Danh s√°ch ng√¥n ng·ªØ OCR (default: ['vie', 'eng'])
            
        Returns:
            Tuple[str, Dict]: (extracted_text, metadata)
        """
        try:
            if languages is None:
                languages = self.supported_languages
            
            # Convert PDF to images
            logger.info(f"üîÑ Converting PDF to images...")
            images = convert_from_path(
                pdf_path,
                dpi=300,  # High DPI for better OCR
                first_page=1,
                last_page=None,
                fmt='PNG'
            )
            
            text_content = ""
            page_texts = []
            ocr_language = '+'.join(languages)
            
            for page_num, image in enumerate(images):
                logger.info(f"üîç Processing page {page_num + 1} with OCR...")
                
                # Preprocess image for better OCR
                processed_image = self._preprocess_image(image)
                
                # Extract text using OCR
                page_text = pytesseract.image_to_string(
                    processed_image,
                    lang=ocr_language,
                    config=self.ocr_config
                )
                
                text_content += page_text + "\n"
                page_texts.append({
                    'page_number': page_num + 1,
                    'text': page_text,
                    'char_count': len(page_text),
                    'image_size': image.size
                })
            
            metadata = {
                'processing_type': 'ocr-based',
                'total_pages': len(page_texts),
                'total_characters': len(text_content),
                'page_details': page_texts,
                'ocr_language': ocr_language,
                'ocr_config': self.ocr_config
            }
            
            logger.info(f"‚úÖ Extracted text from {len(page_texts)} pages using OCR")
            return text_content.strip(), metadata
            
        except Exception as e:
            logger.error(f"‚ùå Error extracting text with OCR: {e}")
            raise
    
    def _preprocess_image(self, image: Image.Image) -> Image.Image:
        """
        Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·ªÉ c·∫£i thi·ªán ch·∫•t l∆∞·ª£ng OCR
        
        Args:
            image: PIL Image object
            
        Returns:
            Image.Image: Processed image
        """
        try:
            # Convert to grayscale
            if image.mode != 'L':
                image = image.convert('L')
            
            # Resize if too small (minimum 300px width)
            if image.width < 300:
                ratio = 300 / image.width
                new_height = int(image.height * ratio)
                image = image.resize((300, new_height), Image.Resampling.LANCZOS)
            
            # Apply some basic image enhancement
            # Note: C√≥ th·ªÉ th√™m c√°c k·ªπ thu·∫≠t x·ª≠ l√Ω ·∫£nh kh√°c nh∆∞:
            # - Noise reduction
            # - Contrast enhancement
            # - Binarization
            
            return image
            
        except Exception as e:
            logger.error(f"‚ùå Error preprocessing image: {e}")
            return image
    
    def process_pdf(self, pdf_path: str, force_ocr: bool = False) -> Tuple[str, Dict[str, Any]]:
        """
        X·ª≠ l√Ω PDF file (t·ª± ƒë·ªông ph√°t hi·ªán lo·∫°i ho·∫∑c force OCR)
        
        Args:
            pdf_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file PDF
            force_ocr: B·∫Øt bu·ªôc s·ª≠ d·ª•ng OCR (default: False)
            
        Returns:
            Tuple[str, Dict]: (extracted_text, metadata)
        """
        try:
            if not self.is_initialized:
                logger.warning("‚ö†Ô∏è PDF Processor not initialized, attempting to initialize...")
                import asyncio
                asyncio.create_task(self.initialize())
            
            # Ph√°t hi·ªán lo·∫°i PDF
            if force_ocr:
                pdf_type = 'image-based'
                logger.info("üîÑ Force OCR mode enabled")
            else:
                pdf_type = self.detect_pdf_type(pdf_path)
                logger.info(f"üîç Detected PDF type: {pdf_type}")
            
            # X·ª≠ l√Ω theo lo·∫°i PDF
            if pdf_type == 'text-based':
                return self.extract_text_from_pdf(pdf_path)
            else:
                return self.extract_text_with_ocr(pdf_path)
                
        except Exception as e:
            logger.error(f"‚ùå Error processing PDF: {e}")
            # Fallback: th·ª≠ OCR n·∫øu text extraction th·∫•t b·∫°i
            try:
                logger.info("üîÑ Attempting OCR as fallback...")
                return self.extract_text_with_ocr(pdf_path)
            except Exception as ocr_error:
                logger.error(f"‚ùå OCR fallback also failed: {ocr_error}")
                raise
    
    def get_processing_stats(self) -> Dict[str, Any]:
        """
        L·∫•y th·ªëng k√™ v·ªÅ PDF processing
        
        Returns:
            Dict[str, Any]: Processing statistics
        """
        return {
            'initialized': self.is_initialized,
            'supported_languages': self.supported_languages,
            'ocr_config': self.ocr_config,
            'tesseract_version': pytesseract.get_tesseract_version() if self.is_initialized else None,
            'available_languages': pytesseract.get_languages() if self.is_initialized else []
        }

# Global PDF processor instance
pdf_processor = PDFProcessor()
